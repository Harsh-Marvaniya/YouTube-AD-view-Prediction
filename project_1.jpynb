{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1RnVvg2ZeCkxvyMCVsL4XoGaYVo4IALmH","authorship_tag":"ABX9TyMzuH2B3gALNIl7p2fJN5Hk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":97,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nJ6hLVB52MES","executionInfo":{"status":"ok","timestamp":1706334552432,"user_tz":-330,"elapsed":3208,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}},"outputId":"a5b16c54-a29a-4de1-8061-9a69d1fa7674"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')\n","\n","# Import libraries\n","import pandas as pd\n","import seaborn as sns\n","# import matplotlib.cn as cn\n","import matplotlib.pyplot as plt\n","\n","df = pd.read_csv(\"/content/drive/MyDrive/ML_Intern_Data/Copy of train.csv\")"]},{"cell_type":"code","source":["df.head"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tjzg-fLx3i7x","executionInfo":{"status":"ok","timestamp":1706334556526,"user_tz":-330,"elapsed":394,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}},"outputId":"c82d8d91-f25a-4fa8-c7fa-f0fa58bbcff1"},"execution_count":98,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of            vidid  adview    views likes dislikes comment   published duration  \\\n","0      VID_18655      40  1031602  8523      363    1095  2016-09-14  PT7M37S   \n","1      VID_14135       2     1707    56        2       6  2016-10-01  PT9M30S   \n","2       VID_2187       1     2023    25        0       2  2016-07-02  PT2M16S   \n","3      VID_23096       6   620860   777      161     153  2016-07-27  PT4M22S   \n","4      VID_10175       1      666     1        0       0  2016-06-29    PT31S   \n","...          ...     ...      ...   ...      ...     ...         ...      ...   \n","14994     VID_31       2   525949  1137       83      86  2015-05-18  PT6M10S   \n","14995   VID_5861       1   665673  3849      156     569  2015-10-20  PT3M56S   \n","14996    VID_805       4     3479    16        1       1  2013-08-23  PT3M13S   \n","14997  VID_19843       1      963     0        0       0  2010-10-02    PT26S   \n","14998   VID_8534       1    15212    22        5       4  2016-02-19   PT1M1S   \n","\n","      category  \n","0            F  \n","1            D  \n","2            C  \n","3            H  \n","4            D  \n","...        ...  \n","14994        A  \n","14995        D  \n","14996        B  \n","14997        G  \n","14998        D  \n","\n","[14999 rows x 9 columns]>"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EA54xMD64Md1","executionInfo":{"status":"ok","timestamp":1706334562565,"user_tz":-330,"elapsed":420,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}},"outputId":"a0537d62-d255-4995-ee1d-818f09afef27"},"execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(14999, 9)"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["category = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \"H\":8,}\n","df[\"category\"] = df[\"category\"].map(category)\n","df.head"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GV3Gzpkn4OZZ","executionInfo":{"status":"ok","timestamp":1706334566776,"user_tz":-330,"elapsed":692,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}},"outputId":"dbe58275-2b66-4fd1-a0e2-10cf30cd9d03"},"execution_count":100,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of            vidid  adview    views likes dislikes comment   published duration  \\\n","0      VID_18655      40  1031602  8523      363    1095  2016-09-14  PT7M37S   \n","1      VID_14135       2     1707    56        2       6  2016-10-01  PT9M30S   \n","2       VID_2187       1     2023    25        0       2  2016-07-02  PT2M16S   \n","3      VID_23096       6   620860   777      161     153  2016-07-27  PT4M22S   \n","4      VID_10175       1      666     1        0       0  2016-06-29    PT31S   \n","...          ...     ...      ...   ...      ...     ...         ...      ...   \n","14994     VID_31       2   525949  1137       83      86  2015-05-18  PT6M10S   \n","14995   VID_5861       1   665673  3849      156     569  2015-10-20  PT3M56S   \n","14996    VID_805       4     3479    16        1       1  2013-08-23  PT3M13S   \n","14997  VID_19843       1      963     0        0       0  2010-10-02    PT26S   \n","14998   VID_8534       1    15212    22        5       4  2016-02-19   PT1M1S   \n","\n","       category  \n","0             6  \n","1             4  \n","2             3  \n","3             8  \n","4             4  \n","...         ...  \n","14994         1  \n","14995         4  \n","14996         2  \n","14997         7  \n","14998         4  \n","\n","[14999 rows x 9 columns]>"]},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["df = df[df.views!='F']\n","df = df[df.likes!='F']\n","df = df[df.dislikes!='F']\n","df = df[df.comment!='F']"],"metadata":{"id":"GzNuVVPH5lcz","executionInfo":{"status":"ok","timestamp":1706334569162,"user_tz":-330,"elapsed":654,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}}},"execution_count":101,"outputs":[]},{"cell_type":"code","source":["column_vidid = df['vidid']"],"metadata":{"id":"0qpZsjVp9Sxi","executionInfo":{"status":"ok","timestamp":1706334574967,"user_tz":-330,"elapsed":684,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}}},"execution_count":102,"outputs":[]},{"cell_type":"code","source":["#Convert values to integers for views, likes, comments, dislikes and adview\n","df[\"views\"] = pd.to_numeric(df[\"views\"])\n","df[\"comment\"] = pd.to_numeric(df[\"comment\"])\n","df[\"likes\"] = pd.to_numeric(df[\"likes\"])\n","df[\"dislikes\"] = pd.to_numeric(df[\"dislikes\"])\n","df[\"adview\"]=pd.to_numeric(df[\"adview\"])\n","\n","column_vidid = df['vidid']"],"metadata":{"id":"njodMWHf_UdW","executionInfo":{"status":"ok","timestamp":1706334576828,"user_tz":-330,"elapsed":6,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}}},"execution_count":103,"outputs":[]},{"cell_type":"code","source":["# Encoding features like category, Duration, Vidid\n","from sklearn.preprocessing import LabelEncoder\n","df['duration']=LabelEncoder().fit_transform(df['duration'])\n","df['vidid']=LabelEncoder().fit_transform(df['vidid'])\n","df['published']=LabelEncoder().fit_transform(df['published'])\n","\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ydk1SDG6fTpb","executionInfo":{"status":"ok","timestamp":1706334579017,"user_tz":-330,"elapsed":657,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}},"outputId":"a27239e0-583d-40f1-983e-43e857599409"},"execution_count":104,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   vidid  adview    views  likes  dislikes  comment  published  duration  \\\n","0   5912      40  1031602   8523       363     1095       2168      2925   \n","1   2741       2     1707     56         2        6       2185      3040   \n","2   8138       1     2023     25         0        2       2094      1863   \n","3   9005       6   620860    777       161      153       2119      2546   \n","4    122       1      666      1         0        0       2091      1963   \n","\n","   category  \n","0         6  \n","1         4  \n","2         3  \n","3         8  \n","4         4  "],"text/html":["\n","  <div id=\"df-644546e6-c2f7-442d-ba70-e780f2e07d44\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>vidid</th>\n","      <th>adview</th>\n","      <th>views</th>\n","      <th>likes</th>\n","      <th>dislikes</th>\n","      <th>comment</th>\n","      <th>published</th>\n","      <th>duration</th>\n","      <th>category</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5912</td>\n","      <td>40</td>\n","      <td>1031602</td>\n","      <td>8523</td>\n","      <td>363</td>\n","      <td>1095</td>\n","      <td>2168</td>\n","      <td>2925</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2741</td>\n","      <td>2</td>\n","      <td>1707</td>\n","      <td>56</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>2185</td>\n","      <td>3040</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8138</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>25</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2094</td>\n","      <td>1863</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9005</td>\n","      <td>6</td>\n","      <td>620860</td>\n","      <td>777</td>\n","      <td>161</td>\n","      <td>153</td>\n","      <td>2119</td>\n","      <td>2546</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>122</td>\n","      <td>1</td>\n","      <td>666</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2091</td>\n","      <td>1963</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-644546e6-c2f7-442d-ba70-e780f2e07d44')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-644546e6-c2f7-442d-ba70-e780f2e07d44 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-644546e6-c2f7-442d-ba70-e780f2e07d44');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f333192e-5738-435c-ab75-6f1fbaa1c691\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f333192e-5738-435c-ab75-6f1fbaa1c691')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f333192e-5738-435c-ab75-6f1fbaa1c691 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["# convert Time_in_sec for duration\n","import datetime\n","import time\n","\n","# convert Time_in_sec for duration\n","import datetime\n","import time\n","\n","def checki(x):\n","  y = x[2:]\n","  h = ''\n","  m = ''\n","  s = ''\n","  mm = ''\n","  P = ['H', 'M', 'S']\n","  for i in y:\n","    if i not in P:\n","      mm += i\n","    else:\n","      if (i == \"H\"):\n","        h = mm\n","        mm = ''\n","      elif (i == \"M\"):\n","        m = mm\n","        mm = ''\n","      else:\n","        s = mm\n","        mm = ''\n","  if (h == ''):\n","    h = '00'\n","  if (m == ''):\n","    m = '00'\n","  if (s == ''):\n","    s = '00'\n","  bp = h + ':' + m + ':' + s\n","  return bp\n","\n","train = pd.read_csv(\"/content/drive/MyDrive/ML_Intern_Data/Copy of train.csv\")\n","mp = pd.read_csv(\"/content/drive/MyDrive/ML_Intern_Data/Copy of train.csv\")[\"duration\"]\n","time = mp.apply(checki)\n","\n","def func_sec(time_string):\n","  h, m, s = time_string.split(':')\n","  return int(h) * 3600 + int(m) * 60 + int(s)\n","\n","time1 = time.apply(func_sec)\n","df[\"duration\"] = time1\n","df.head()\n","\n","def func_sec(time_string):\n","  h, m, s = time_string.split(':')\n","  return int(h) * 3600 + int(m) * 60 + int(s)\n","\n","time1 = time.apply(func_sec)\n","\n","df[\"duration\"]=time1\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"BrHaUo__gCBi","executionInfo":{"status":"ok","timestamp":1706334584908,"user_tz":-330,"elapsed":440,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}},"outputId":"dc582237-ea69-4539-f54a-4d1742b5b1ff"},"execution_count":105,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   vidid  adview    views  likes  dislikes  comment  published  duration  \\\n","0   5912      40  1031602   8523       363     1095       2168       457   \n","1   2741       2     1707     56         2        6       2185       570   \n","2   8138       1     2023     25         0        2       2094       136   \n","3   9005       6   620860    777       161      153       2119       262   \n","4    122       1      666      1         0        0       2091        31   \n","\n","   category  \n","0         6  \n","1         4  \n","2         3  \n","3         8  \n","4         4  "],"text/html":["\n","  <div id=\"df-71e96b6e-ade4-49ef-a8b0-cfdf6102cf61\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>vidid</th>\n","      <th>adview</th>\n","      <th>views</th>\n","      <th>likes</th>\n","      <th>dislikes</th>\n","      <th>comment</th>\n","      <th>published</th>\n","      <th>duration</th>\n","      <th>category</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5912</td>\n","      <td>40</td>\n","      <td>1031602</td>\n","      <td>8523</td>\n","      <td>363</td>\n","      <td>1095</td>\n","      <td>2168</td>\n","      <td>457</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2741</td>\n","      <td>2</td>\n","      <td>1707</td>\n","      <td>56</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>2185</td>\n","      <td>570</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8138</td>\n","      <td>1</td>\n","      <td>2023</td>\n","      <td>25</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2094</td>\n","      <td>136</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9005</td>\n","      <td>6</td>\n","      <td>620860</td>\n","      <td>777</td>\n","      <td>161</td>\n","      <td>153</td>\n","      <td>2119</td>\n","      <td>262</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>122</td>\n","      <td>1</td>\n","      <td>666</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2091</td>\n","      <td>31</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71e96b6e-ade4-49ef-a8b0-cfdf6102cf61')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-71e96b6e-ade4-49ef-a8b0-cfdf6102cf61 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-71e96b6e-ade4-49ef-a8b0-cfdf6102cf61');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-048da7df-420c-44bf-9ec9-ebdc150a08cb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-048da7df-420c-44bf-9ec9-ebdc150a08cb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-048da7df-420c-44bf-9ec9-ebdc150a08cb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":105}]},{"cell_type":"code","source":["# visualizination\n","plt.hist(df[\"category\"])\n","plt.show()\n","plt.plot(df[\"adview\"])\n","plt.show()\n","\n","# remove videos with adview grater than 2000000 as outlier\n","df = df[df[\"adview\"]<2000000]\n","\n","# heatmap\n","import seaborn as sns\n","import numpy as np\n","\n","fig, ax = plt.subplots(figsize=(10, 8))\n","corr = df.corr()\n","sns.heatmap(corr.values, mask=np.zeros_like(corr, dtype=np.bool), cmap=plt.cm.coolwarm)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"pNeVE5kbiprw","executionInfo":{"status":"ok","timestamp":1706334592204,"user_tz":-330,"elapsed":1281,"user":{"displayName":"Harsh Maravaniya","userId":"12700667891925224215"}},"outputId":"6e04b18e-51e9-4a34-f993-180fb5b57178"},"execution_count":106,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["<ipython-input-106-fa0ec3f970ef>:16: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","  sns.heatmap(corr.values, mask=np.zeros_like(corr, dtype=np.bool), cmap=plt.cm.coolwarm)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Split Data\n","df.head()\n","Y_train = pd.DataFrame(data = df.iloc[:, 1].values, columns = ['target'])\n","df.head()\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(df, Y_train, test_size=0.2, random_state=42)\n","X_train.shape"],"metadata":{"id":"FBCrx5p_nIeA"},"execution_count":null,"outputs":[]},{"source":["# Convert X_train to a Pandas DataFrame\n","X_train = pd.DataFrame(X_train)\n","\n","# Normalize data\n","for column in X_train.columns:\n","    print(f\"Column '{column}' contains string values:\")\n","    print(X_train[column].unique())\n","\n","print(X_train.columns)\n","X_train['category'] = pd.Series([0] * len(X_train))\n","X_train = X_train.dropna(subset=['category'])\n","\n","X_train = X_train[~X_train['category'].isin(['VID_7020'])]\n","X_test = X_test[~X_test['category'].isin(['VID_7020'])]\n","\n","# Create a mapping between string values and numeric values\n","category_mapping = {'VID_7020': 0}\n","\n","# Replace string values with numeric values\n","X_train['category'] = X_train['category'].map(category_mapping)\n","X_test['category'] = X_test['category'].map(category_mapping)\n"],"cell_type":"code","metadata":{"id":"BNYIY54SV0s-"},"execution_count":null,"outputs":[]},{"source":["# Evaluation Metrics\n","from sklearn import metrics\n","def print_error(X_test, y_test, model_name):\n","    prediction = model_name.predict(X_test)\n","    print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, prediction))\n","    print('Mean Squared Error:', metrics.mean_squared_error(y_test, prediction))\n","    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))\n","\n","# # Linear Regression\n","# import pandas as pd\n","# import numpy as np\n","# from sklearn import metrics\n","# from sklearn import linear_model\n","# linear_regression = linear_model.LinearRegression()\n","# X_train.columns = X_train.columns.astype(str)\n","# linear_regression.fit(X_train, y_train)\n","# print_error(X_test,y_test, linear_regression)\n","\n","#import metrics\n","from sklearn.metrics import mean_squared_error, r2_score\n","import pandas as pd\n","import numpy as np\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","#define print_error function\n","def print_error(X_test, y_test, model):\n","    #predict values\n","    y_pred = model.predict(X_test)\n","    #calculate and print RMSE\n","    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n","    print(\"Root mean squared error: \", rmse)\n","    #calculate and print R2 score\n","    r2 = r2_score(y_test, y_pred)\n","    print(\"R2 score: \", r2)\n","\n","#call print_error function\n","linear_regression = LinearRegression()\n","LinearRegression.fit(X_train, y_train)\n","print_error(X_test, y_test, linear_regression)\n","\n"],"cell_type":"code","metadata":{"id":"rmFOy6k8WNgw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Decision Tree Regressor\n","from sklearn.tree import DecisionTreeRegressor\n","decision_tree = DecisionTreeRegressor()\n","decision_tree.fit(X_train, y_train)\n","print_error(X_test,y_test, decision_tree)\n","# Random Forest Regressor\n","from sklearn.ensemble import RandomForestRegressor\n","n_estimators = 200\n","max_depth = 25\n","min_samples_split=15\n","min_samples_leaf=2\n","random_forest = RandomForestRegressor(n_estimators = n_estimators, max_depth = max_depth, min_samples_split=min_samples_spli)\n","random_forest.fit(X_train,y_train)\n","print_error(X_test,y_test, random_forest)"],"metadata":{"id":"lBhoPgrUaDWG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Artificial Neural Network\n","import keras\n","from keras.layers import Dense\n","ann = keras.models.Sequential([\n","                                Dense(6, activation=\"relu\",\n","                                input_shape=X_train.shape[1:]),\n","                                Dense(6,activation=\"relu\"),\n","                                Dense(1)\n","                                ])\n","optimizer=keras.optimizers.Adam()\n","loss=keras.losses.mean_squared_error\n","ann.compile(optimizer=optimizer,loss=loss,metrics=[\"mean_squared_error\"])\n","history=ann.fit(X_train,y_train,epochs=100)\n","ann.summary()\n","print_error(X_test,y_test,ann)"],"metadata":{"id":"x_V-faxCaNce"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Saving Scikitlearn models\n","import joblib\n","joblib.dump(decision_tree, \"decisiontree_youtubeadview.pkl\")\n","# Saving Keras Artificial Neural Network model\n","ann.save(\"ann_youtubeadview.h5\")"],"metadata":{"id":"TPq4ghzTaaks"},"execution_count":null,"outputs":[]}]}